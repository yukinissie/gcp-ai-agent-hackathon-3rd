name: Deploy Culture Web to Production

on:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast1
  SERVICE: culture-web-prod
  REGION: asia-northeast1

jobs:
  deploy:
    permissions:
      contents: write
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@c200f3691d83b41bf9bbd8638997a462592937ed" # v2.1.13
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef" # v3.6.0
        with:
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"
          username: _json_key
          password: "${{ secrets.GCP_SA_KEY }}"

      - name: Build and Push Container
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        with:
          context: culture-web
          file: culture-infra/service/culture-web/environments/common/docker/Dockerfile
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/culture-web/culture-web:${{ github.sha }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/culture-web/culture-web:latest
          cache-from: type=gha,scope=culture-web-buildx
          cache-to: type=gha,mode=max,scope=culture-web-buildx
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@251330ba9a8a34bfbc1622895f42e1d53fd14522 # v2.7.6
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/culture-web/culture-web:${{ github.sha }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Create Release Tag
        run: |
          # バージョンを日付とコミットハッシュで生成
          VERSION="v$(date +'%Y.%m.%d')-${GITHUB_SHA:0:7}"

          # タグが既に存在する場合はスキップ
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "Tag ${VERSION} already exists, skipping tag creation"
            exit 0
          fi

          # アノテーション付きタグを作成
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "${VERSION}" -m "Production Release ${VERSION}

          Deployed to: https://culture.yukinissie.com
          Commit: ${GITHUB_SHA}

          Auto-generated on production culture web deployment"

          # タグをリモートにプッシュ
          git push origin "${VERSION}"

          echo "Created and pushed release tag: ${VERSION}"

      # MEMO: Next.js 側できめ細やかなキャッシュ制御をしているので、Cloud CDN 側のキャッシュは無効化しない
      # - name: Invalidate CDN Cache
      #   run: |
      #     gcloud compute url-maps invalidate-cdn-cache culture-web-prod-url-map \
      #       --path "/*" \
      #       --project ${{ env.PROJECT_ID }} \
      #       --async

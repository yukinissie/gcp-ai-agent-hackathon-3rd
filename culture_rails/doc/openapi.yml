openapi: 3.0.3
info:
  title: Culture Rails API
  description: Rails 8 認証システムAPI - User/UserCredential分離設計
  version: 1.0.0
  contact:
    name: Culture Rails チーム

servers:
  - url: http://localhost:3000/api/v1
    description: 開発サーバー

# Authentication API endpoints
paths:
  /users:
    post:
      summary: ユーザー登録
      tags: [認証]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email_address:
                      type: string
                      format: email
                      example: "user@example.com"
                    password:
                      type: string
                      minLength: 6
                      example: "password123"
                    password_confirmation:
                      type: string
                      minLength: 6
                      example: "password123"
                  required: [email_address, password, password_confirmation]
              required: [user]
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      user:
                        type: object
                        additionalProperties: false
                        properties:
                          id:
                            type: integer
                            example: 1
                          human_id:
                            type: string
                            example: "abc123def456"
                            description: "外部参照用の一意識別子"
                          email_address:
                            type: string
                            format: email
                            example: "user@example.com"
                          authenticated:
                            type: boolean
                            example: true
                        required: [id, human_id, email_address, authenticated]
                    required: [user]
                required: [success, data]
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
    get:
      summary: ユーザー詳細取得
      description: 現在ログイン中のユーザー情報を取得
      tags: [認証]
      responses:
        "200":
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 1
                      human_id:
                        type: string
                        example: "abc123def456"
                      email_address:
                        type: string
                        format: email
                        example: "user@example.com"
                      authenticated:
                        type: boolean
                        example: true
                    required: [id, human_id, email_address, authenticated]
                required: [success, data]
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "authentication_required"
                  message:
                    type: string
                    example: "ログインが必要です"
                required: [success, error, message]

  /ping:
    get:
      summary: 疎通テスト用Ping API
      description: APIの疎通確認用エンドポイント
      tags: [疎通テスト]
      responses:
        "200":
          description: 正常応答
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 1
                      message:
                        type: string
                        example: "pong"
                required:
                  - success
                  - data
        "404":
          description: リソースが見つからない場合
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "not_found"
                  message:
                    type: string
                    example: "リソースが見つかりません"
                required:
                  - success
                  - error
                  - message
        "500":
          description: サーバーエラー
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "internal_server_error"
                  message:
                    type: string
                    example: "予期せぬエラーが発生しました"
                required:
                  - success
                  - error
                  - message
    post:
      summary: 疎通テスト用Ping API（POST）
      description: 疎通テスト用のPOSTエンドポイント。任意のメッセージを送信して確認できる。
      tags: [疎通テスト]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                message:
                  type: string
                  example: "hello ping"
              required:
                - message
      responses:
        "201":
          description: 正常応答（作成）
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 2
                      message:
                        type: string
                        example: "hello ping"
                required:
                  - success
                  - data
        "404":
          description: リソースが見つからない場合
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "not_found"
                  message:
                    type: string
                    example: "リソースが見つかりません"
                required:
                  - success
                  - error
                  - message
        "500":
          description: サーバーエラー
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "internal_server_error"
                  message:
                    type: string
                    example: "予期せぬエラーが発生しました"
                required:
                  - success
                  - error
                  - message
        "422":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "validation_error"
                  message:
                    type: string
                    example: "Message can't be blank"
                required:
                  - success
                  - error
                  - message


  /session:
    post:
      summary: ユーザーログイン
      description: メールアドレスとパスワードでログイン
      tags: [認証]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                email_address:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
              required: [email_address, password]
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      user:
                        type: object
                        additionalProperties: false
                        properties:
                          id:
                            type: integer
                            example: 1
                          human_id:
                            type: string
                            example: "abc123def456"
                          email_address:
                            type: string
                            format: email
                            example: "user@example.com"
                          authenticated:
                            type: boolean
                            example: true
                        required: [id, human_id, email_address, authenticated]
                    required: [user]
                required: [success, data]
        "401":
          description: ログイン失敗
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "invalid_credentials"
                  message:
                    type: string
                    example: "ログイン情報が正しくありません"
                required: [success, error, message]

    get:
      summary: セッション確認
      description: 現在のログイン状態を確認
      tags: [認証]
      responses:
        "200":
          description: セッション状態取得成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  authenticated:
                    type: boolean
                    example: true
                  user:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 1
                      human_id:
                        type: string
                        example: "abc123def456"
                      email_address:
                        type: string
                        format: email
                        example: "user@example.com"
                      authenticated:
                        type: boolean
                        example: true
                    required: [id, human_id, email_address, authenticated]
                    nullable: true
                required: [success, authenticated, user]

    delete:
      summary: ユーザーログアウト
      description: 現在のセッションを終了
      tags: [認証]
      responses:
        "200":
          description: ログアウト成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "ログアウトしました"
                required: [success, message]

  # Articles CRUD API endpoints
  /articles:
    get:
      summary: 記事一覧取得
      description: 公開済み記事の一覧を取得（検索・フィルタリング対応）
      tags: [記事管理]
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
            example: "デジタルアート"
          description: タイトル・概要・本文での検索キーワード
        - name: tags
          in: query
          required: false
          schema:
            type: string
            example: "デジタルアート,NFT"
          description: タグ名での絞り込み（カンマ区切り）
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
          description: 取得件数制限
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
          description: 取得開始位置
      responses:
        "200":
          description: 記事一覧取得成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  articles:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: "現代アートの新しい潮流：デジタルアートの可能性"
                        summary:
                          type: string
                          example: "デジタル技術の進歩により、アートの表現方法も大きく変化しています。"
                        author:
                          type: string
                          example: "田中美術"
                        content_format:
                          type: string
                          enum: [markdown, html, plain]
                          example: "markdown"
                        published_at:
                          type: string
                          format: date-time
                          example: "2025-01-15T10:00:00Z"
                          nullable: true
                        image_url:
                          type: string
                          example: "https://example.com/images/digital_art.jpg"
                          nullable: true
                        tags:
                          type: array
                          items:
                            type: object
                            additionalProperties: false
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: "デジタルアート"
                              category:
                                type: string
                                example: "art"
                            required: [id, name, category]
                        additional_tags_count:
                          type: integer
                          example: 0
                          description: 表示されていないタグの数
                      required: [id, title, summary, author, content_format, published_at, tags, additional_tags_count]
                required: [articles]

    post:
      summary: 記事作成
      description: 新しい記事を作成
      tags: [記事管理]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                article:
                  type: object
                  additionalProperties: false
                  properties:
                    title:
                      type: string
                      example: "新しい記事のタイトル"
                      maxLength: 255
                    summary:
                      type: string
                      example: "記事の概要です。"
                      maxLength: 500
                    content:
                      type: string
                      example: "# 記事の本文\n\n詳細な内容を記載します。"
                    author:
                      type: string
                      example: "著者名"
                    content_format:
                      type: string
                      enum: [markdown, html, plain]
                      example: "markdown"
                      default: "markdown"
                    source_url:
                      type: string
                      format: uri
                      example: "https://example.com/source"
                      nullable: true
                    image_url:
                      type: string
                      format: uri
                      example: "https://example.com/image.jpg"
                      nullable: true
                    published:
                      type: boolean
                      example: false
                      default: false
                    tag_names:
                      type: array
                      items:
                        type: string
                      example: ["デジタルアート", "NFT"]
                      description: 関連付けるタグ名の配列
                    tag_ids:
                      type: array
                      items:
                        type: integer
                      example: [1, 2]
                      description: 関連付けるタグIDの配列
                  required: [title, summary, content, author]
              required: [article]
      responses:
        "201":
          description: 記事作成成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  article:
                    $ref: "#/components/schemas/ArticleDetail"
                required: [article]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "422":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

  /articles/{id}:
    get:
      summary: 記事詳細取得
      description: 指定した記事の詳細を取得（認証済みの場合は評価状態も含む）
      tags: [記事管理]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: 記事詳細取得成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  article:
                    $ref: "#/components/schemas/ArticleDetail"
                required: [article]
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

    put:
      summary: 記事更新
      description: 指定した記事を更新
      tags: [記事管理]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                article:
                  type: object
                  additionalProperties: false
                  properties:
                    title:
                      type: string
                      example: "更新されたタイトル"
                      maxLength: 255
                    summary:
                      type: string
                      example: "更新された概要です。"
                      maxLength: 500
                    content:
                      type: string
                      example: "# 更新された本文\n\n詳細な内容を記載します。"
                    author:
                      type: string
                      example: "著者名"
                    content_format:
                      type: string
                      enum: [markdown, html, plain]
                      example: "markdown"
                    source_url:
                      type: string
                      format: uri
                      example: "https://example.com/source"
                      nullable: true
                    image_url:
                      type: string
                      format: uri
                      example: "https://example.com/image.jpg"
                      nullable: true
                    published:
                      type: boolean
                      example: true
                    tag_names:
                      type: array
                      items:
                        type: string
                      example: ["デジタルアート", "現代アート"]
                      description: 関連付けるタグ名の配列
              required: [article]
      responses:
        "200":
          description: 記事更新成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  article:
                    $ref: "#/components/schemas/ArticleDetail"
                required: [article]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "422":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

    patch:
      summary: 記事部分更新
      description: 指定した記事を部分的に更新
      tags: [記事管理]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                article:
                  type: object
                  additionalProperties: false
                  properties:
                    title:
                      type: string
                      example: "更新されたタイトル"
                    summary:
                      type: string
                      example: "更新された概要"
                    content:
                      type: string
                      example: "更新されたコンテンツ"
                    content_format:
                      type: string
                      enum: [markdown, html, plain]
                      example: "markdown"
                    author:
                      type: string
                      example: "更新された著者"
                    source_url:
                      type: string
                      format: uri
                      example: "https://example.com/updated-source"
                      nullable: true
                    image_url:
                      type: string
                      format: uri
                      example: "https://example.com/updated-image.jpg"
                      nullable: true
                    published:
                      type: boolean
                      example: true
                    tag_names:
                      type: array
                      items:
                        type: string
                      example: ["テクノロジー", "AI"]
              required: [article]
      responses:
        "200":
          description: 記事更新成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  article:
                    $ref: "#/components/schemas/ArticleDetail"
                required: [article]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "422":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

    delete:
      summary: 記事削除
      description: 指定した記事を削除
      tags: [記事管理]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: 記事削除成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "記事を削除しました"
                required: [success, message]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  # Tags API endpoints
  /tags:
    get:
      summary: タグ一覧取得
      description: タグ一覧を人気順で取得（検索対応）
      tags: [タグ管理]
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
            example: "アート"
          description: タグ名での部分一致検索
        - name: category
          in: query
          required: false
          schema:
            type: string
            enum: [tech, art, music, architecture, lifestyle, business]
            example: "art"
          description: カテゴリでの絞り込み
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
            example: 50
          description: 取得件数制限
      responses:
        "200":
          description: タグ一覧取得成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  tags:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "デジタルアート"
                        category:
                          type: string
                          example: "art"
                        articles_count:
                          type: integer
                          example: 5
                          description: このタグが付いた公開記事数
                      required: [id, name, category, articles_count]
                required: [tags]

  # Activities API endpoints
  /articles/{article_id}/activities:
    post:
      summary: 記事評価の切り替え
      description: |
        記事に対する評価を設定・切り替え・削除します。
        
        動作仕様：
        - good送信：badがあれば削除してgoodを設定、既にgoodがある場合は削除（none）
        - bad送信：goodがあれば削除してbadを設定、既にbadがある場合は削除（none）
      tags: [アクティビティ]
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                activity_type:
                  type: string
                  enum: [good, bad]
                  example: "good"
              required: [activity_type]
      responses:
        "201":
          description: 評価設定成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  current_evaluation:
                    type: string
                    enum: [good, bad, none]
                    example: "good"
                    description: "ユーザーの現在の評価状態"
                  article:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "現代アートの新しい潮流"
                      good_count:
                        type: integer
                        example: 15
                        description: "Good評価の総数"
                      bad_count:
                        type: integer
                        example: 3
                        description: "Bad評価の総数"
                    required: [id, title, good_count, bad_count]
                required: [current_evaluation, article]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "422":
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

  # Articles Activities API endpoints
  /articles/{article_id}/good:
    post:
      summary: Good評価の追加
      description: 記事にGood評価を追加（既存のBad評価は自動削除）
      tags: [記事評価]
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "201":
          description: Good評価追加成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  activity:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 456
                      user_id:
                        type: integer
                        example: 1
                      article_id:
                        type: integer
                        example: 1
                      activity_type:
                        type: string
                        enum: [good, bad]
                        example: "good"
                      action:
                        type: string
                        enum: [add, remove]
                        example: "add"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:00:00Z"
                    required: [id, user_id, article_id, activity_type, action, created_at]
                  user_activities:
                    type: object
                    additionalProperties: false
                    properties:
                      good:
                        type: boolean
                        example: true
                      bad:
                        type: boolean
                        example: false
                    required: [good, bad]
                required: [activity, user_activities]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

    delete:
      summary: Good評価の削除
      description: 記事のGood評価を削除
      tags: [記事評価]
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Good評価削除成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  activity:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 457
                      user_id:
                        type: integer
                        example: 1
                      article_id:
                        type: integer
                        example: 1
                      activity_type:
                        type: string
                        enum: [good, bad]
                        example: "good"
                      action:
                        type: string
                        enum: [add, remove]
                        example: "remove"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:05:00Z"
                    required: [id, user_id, article_id, activity_type, action, created_at]
                    nullable: true
                  user_activities:
                    type: object
                    additionalProperties: false
                    properties:
                      good:
                        type: boolean
                        example: false
                      bad:
                        type: boolean
                        example: false
                    required: [good, bad]
                required: [activity, user_activities]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /articles/{article_id}/bad:
    post:
      summary: Bad評価の追加
      description: 記事にBad評価を追加（既存のGood評価は自動削除）
      tags: [記事評価]
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "201":
          description: Bad評価追加成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  activity:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 458
                      user_id:
                        type: integer
                        example: 1
                      article_id:
                        type: integer
                        example: 1
                      activity_type:
                        type: string
                        enum: [good, bad]
                        example: "bad"
                      action:
                        type: string
                        enum: [add, remove]
                        example: "add"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:00:00Z"
                    required: [id, user_id, article_id, activity_type, action, created_at]
                  user_activities:
                    type: object
                    additionalProperties: false
                    properties:
                      good:
                        type: boolean
                        example: false
                      bad:
                        type: boolean
                        example: true
                    required: [good, bad]
                required: [activity, user_activities]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

    delete:
      summary: Bad評価の削除
      description: 記事のBad評価を削除
      tags: [記事評価]
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Bad評価削除成功
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  activity:
                    type: object
                    additionalProperties: false
                    properties:
                      id:
                        type: integer
                        example: 459
                      user_id:
                        type: integer
                        example: 1
                      article_id:
                        type: integer
                        example: 1
                      activity_type:
                        type: string
                        enum: [good, bad]
                        example: "bad"
                      action:
                        type: string
                        enum: [add, remove]
                        example: "remove"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:05:00Z"
                    required: [id, user_id, article_id, activity_type, action, created_at]
                    nullable: true
                  user_activities:
                    type: object
                    additionalProperties: false
                    properties:
                      good:
                        type: boolean
                        example: false
                      bad:
                        type: boolean
                        example: false
                    required: [good, bad]
                required: [activity, user_activities]
        "401":
          description: 認証が必要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "404":
          description: 記事が見つからない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"


components:
  schemas:
    # Common Error Types
    ValidationError:
      type: object
      additionalProperties: false
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: string
          example: ["パスワードは6文字以上で入力してください"]
      required: [success, errors]

    AuthError:
      type: object
      additionalProperties: false
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "authentication_required"
        message:
          type: string
          example: "ログインが必要です"
      required: [success, error, message]

    NotFoundError:
      type: object
      additionalProperties: false
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "not_found"
        message:
          type: string
          example: "リソースが見つかりません"
      required: [success, error, message]

    ArticleDetail:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "現代アートの新しい潮流：デジタルアートの可能性"
        summary:
          type: string
          example: "デジタル技術の進歩により、アートの表現方法も大きく変化しています。"
        content:
          type: string
          example: "# デジタルアートとは\n\n現代のアート界では..."
        content_format:
          type: string
          enum: [markdown, html, plain]
          example: "markdown"
        author:
          type: string
          example: "田中美術"
        source_url:
          type: string
          format: uri
          example: "https://example.com/source"
          nullable: true
        image_url:
          type: string
          format: uri
          example: "https://example.com/images/digital_art.jpg"
          nullable: true
        published:
          type: boolean
          example: true
        published_at:
          type: string
          format: date-time
          example: "2025-01-15T10:00:00Z"
          nullable: true
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-15T10:00:00Z"
        user_activities:
          type: object
          additionalProperties: false
          properties:
            good:
              type: boolean
              example: true
            bad:
              type: boolean
              example: false
          required: [good, bad]
          nullable: true
          description: "認証済みユーザーの評価状態（未認証時はnull）"
        tags:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "デジタルアート"
              category:
                type: string
                example: "art"
            required: [id, name, category]
      required: [id, title, summary, content, content_format, author, published, created_at, updated_at, tags]
